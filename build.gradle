plugins {
    id 'org.springframework.boot' version '2.5.6'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    // Asciidoctor 플러그인 적용
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'jacoco'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    asciidoctorExtensions
}

repositories {
    mavenCentral()
}

jacoco {
    toolVersion = "0.8.7"
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    // Hot Reload 적용하기위해 추가
    implementation group: 'org.springframework.boot', name: 'spring-boot-devtools'

    // .adoc 파일에서 빌드, 스니펫 생성을 자동으로 구성되기 위해 추가하는 의존성
    asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'

    // restdocs에서 MockMvc를 사용할 때 사용하는 의존성
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    implementation group: 'org.springframework.restdocs', name: 'spring-restdocs-core'

    //AWS S3 의존성 추가
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-aws', version: '2.2.1.RELEASE'

    //mariadb 의존성 추가
    implementation group: 'org.mariadb.jdbc', name: 'mariadb-java-client'

    testCompileOnly 'org.projectlombok:lombok' // 테스트 의존성 추가
    testAnnotationProcessor 'org.projectlombok:lombok' // 테스트 의존성 추가

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

ext {
    snippetsDir = file('build/generated-snippets')
}

test {
    useJUnitPlatform()
    outputs.dir snippetsDir // 선언한 디렉토리에 생성
    finalizedBy 'jacocoTestReport'
}

// ext에서 정의한 경로에 스니펫을 넣어준뒤 테스트를 진행한다.
asciidoctor {
    configurations "asciidoctorExtensions"
    inputs.dir snippetsDir
    dependsOn test
}

task copyDocument(type: Copy) {
    dependsOn asciidoctor

    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}

//기존에 파일이 있다면 제거한다.
asciidoctor.doFirst {
    println("---------------- delete present asciidoctor.")
    delete file('src/main/resources/static/docs')
}

asciidoctor.doLast {  // 8
    println("---------------- asciidoctor is deleted!")
}

//Jar로 빌드가 되면서 실제 배포시 생성된 명세 html파일의 경로를 찾아 BOOT-INF/classes/static/docs 맵핑
bootJar {
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}") {
        into 'static/docs'
    }
}

build {
    dependsOn('copyDocument')
}

jar {
    // springboot v2.5 이상부터는 빌드 시 plain 아카이브가 생성된다.
    // docker로 배포하기위해서는 하나의 jar만 필요함으로 plan.jar를 제거하기위한 설정
    enabled = false
}

jacocoTestReport {
    reports {
        html.enabled true
        csv.enabled true
        xml.enabled false
    }
    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = 'CLASS'
            // includes = []

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.00
            }

            excludes = [
                    "**.*Dto",
                    "**.*Request",
                    "**.*Response"
            ]
        }
    }
}

task testCoverage(type: Test) {
    group 'verification'
    description 'Runs the unit tests with coverage'

    dependsOn(':test',
            ':jacocoTestReport',
            ':jacocoTestCoverageVerification')

    tasks['jacocoTestReport'].mustRunAfter(tasks['test'])
    tasks['jacocoTestCoverageVerification'].mustRunAfter(tasks['jacocoTestReport'])
}